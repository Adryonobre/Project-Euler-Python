"""
Os quatro dígitos adjacentes no número de 1000 dígitos que têm o maior produto são 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Encontre os treze dígitos adjacentes no número de 1000 dígitos que têm o maior produto. Qual o valor deste produto?
"""
 
#Aqui importamos a biblioteca que usamos para fazer testes, ela já vem com python  
Import unittest
 
#Criamos a função para achar a maior multiplicação em uma sequencia desejada
def maior_sequencia(sequencia):
    numeros = """7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"""
    maximo = 0

    #Fazemos um loop para percorrer todos os números que o exercício passou
    for c in range(0, len(numeros)-sequencia, +1):
        
        #Adicionaremos a uma lista temporaria
        temp = []

        #Faremos um loop para colocar a sequencia na lista temporaria
        for a in range(c, c+sequencia, +1):
            
            #colocamos os numeros na lista
            temp.append(int(numeros[a]))

        #Criamos uma variavel que vai conter a maior multiplicação de uma sequencia, usamos o reduce para filtrar com as funções lambda
        resultado = reduce(lambda x,y: x*y, temp, 1)

        #Pegamos o maior produto
        if resultado > maximo:
            maximo = resultado
    
    #Retornamos o produto
    return maximo

#Aqui fazemos os testes usando a biblioteca importada, utilizamos TestCase para conseguir fazer os testes, pois precisamos dos seus métodos
class Test_maior_sequencia(unittest.TestCase):
    
    #Criamos a função para fazer o teste
    def test_sequencia_de_4_numeros_igual_a_5832(self):
    
        #Usamos o método para verificar se passando o valor 4 como parâmetro o resultado é igual a 5832
        self.assertEqual(maior_sequencia(4), 5832)
        
#Usamos esse código para exibir os testes, usamos o verbosity=2 para mostrar apenas o resultado das funções que começam com test_
unittest.main(verbosity=2)        
